{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53],"program":"/home/ginkoe/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","regex","/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"use_std\"","-C","metadata=7e3eeedda3aed6a8","-C","extra-filename=-7e3eeedda3aed6a8","--out-dir","/home/ginkoe/Project/f/cli/ginker/ginker/target/rls/debug/deps","-L","dependency=/home/ginkoe/Project/f/cli/ginker/ginker/target/rls/debug/deps","--extern","aho_corasick=/home/ginkoe/Project/f/cli/ginker/ginker/target/rls/debug/deps/libaho_corasick-298d67455737b5c5.rmeta","--extern","memchr=/home/ginkoe/Project/f/cli/ginker/ginker/target/rls/debug/deps/libmemchr-e11ccb631ef67572.rmeta","--extern","regex_syntax=/home/ginkoe/Project/f/cli/ginker/ginker/target/rls/debug/deps/libregex_syntax-416e6890921a5dad.rmeta","--extern","thread_local=/home/ginkoe/Project/f/cli/ginker/ginker/target/rls/debug/deps/libthread_local-4b861fc19d161193.rmeta","--extern","utf8_ranges=/home/ginkoe/Project/f/cli/ginker/ginker/target/rls/debug/deps/libutf8_ranges-e4570ba698a4f030.rmeta","--cap-lints","allow","--cfg","regex_runtime_teddy_ssse3","--cfg","regex_runtime_teddy_avx2","--error-format=json","--sysroot","/home/ginkoe/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,103,105,110,107,111,101,47,80,114,111,106,101,99,116,47,102,47,99,108,105,47,103,105,110,107,101,114,47,103,105,110,107,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,114,101,103,101,120,45,55,101,51,101,101,101,100,100,97,51,97,101,100,54,97,56,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"regex","disambiguator":[8418235310155432145,17348707570129438303]},"crate_root":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src","external_crates":[{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[853209657226342047,8462664850197014382]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[772178867720458397,10513760593670507587]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17633954781163668134,3962627684191718065]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7858001605524721373,8369385247697161108]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5226771781757675641,11183407964508506038]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15950205559580256541,6605390554280573401]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[5066653915378193616,7813142097187859454]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[1328488228804362593,9042026925657904388]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[3005442698276396085,7194037300925619286]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[11662190156692096384,12505544175813687064]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":11,"id":{"name":"aho_corasick","disambiguator":[8351819764392376935,4175285403333376755]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":12,"id":{"name":"memchr","disambiguator":[12464273319889289459,6601122571224396979]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":13,"id":{"name":"thread_local","disambiguator":[7392908527318534881,15367374083252854499]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":14,"id":{"name":"lazy_static","disambiguator":[3740726557320911873,16936678471144901464]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":15,"id":{"name":"regex_syntax","disambiguator":[14264150479970714102,17599396970176722303]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":16,"id":{"name":"ucd_util","disambiguator":[6550885312928343982,2046719364984046657]}},{"file_name":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","num":17,"id":{"name":"utf8_ranges","disambiguator":[16727245386054620222,658755352194739912]}}],"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":23430,"line_start":11,"line_end":683,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2448},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18630,"byte_end":18635,"line_start":537,"line_end":537,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18694,"byte_end":18695,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18758,"byte_end":18759,"line_start":541,"line_end":541,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18814,"byte_end":18815,"line_start":543,"line_end":543,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3376},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18899,"byte_end":18904,"line_start":547,"line_end":547,"column_start":5,"column_end":10},"alias_span":null,"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3354},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18906,"byte_end":18911,"line_start":547,"line_end":547,"column_start":12,"column_end":17},"alias_span":null,"name":"Match","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1930},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18913,"byte_end":18921,"line_start":547,"line_end":547,"column_start":19,"column_end":27},"alias_span":null,"name":"Captures","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1894},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18927,"byte_end":18939,"line_start":548,"line_end":548,"column_start":5,"column_end":17},"alias_span":null,"name":"CaptureNames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1982},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18941,"byte_end":18948,"line_start":548,"line_end":548,"column_start":19,"column_end":26},"alias_span":null,"name":"Matches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1974},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18950,"byte_end":18964,"line_start":548,"line_end":548,"column_start":28,"column_end":42},"alias_span":null,"name":"CaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1966},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18966,"byte_end":18983,"line_start":548,"line_end":548,"column_start":44,"column_end":61},"alias_span":null,"name":"SubCaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3382},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18989,"byte_end":19005,"line_start":549,"line_end":549,"column_start":5,"column_end":21},"alias_span":null,"name":"CaptureLocations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1920},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19007,"byte_end":19016,"line_start":549,"line_end":549,"column_start":23,"column_end":32},"alias_span":null,"name":"Locations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1990},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19022,"byte_end":19030,"line_start":550,"line_end":550,"column_start":5,"column_end":13},"alias_span":null,"name":"Replacer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3392},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19032,"byte_end":19043,"line_start":550,"line_end":550,"column_start":15,"column_end":26},"alias_span":null,"name":"ReplacerRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2014},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19045,"byte_end":19053,"line_start":550,"line_end":550,"column_start":28,"column_end":36},"alias_span":null,"name":"NoExpand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1904},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19055,"byte_end":19060,"line_start":550,"line_end":550,"column_start":38,"column_end":43},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1912},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19062,"byte_end":19068,"line_start":550,"line_end":550,"column_start":45,"column_end":51},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1808},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19074,"byte_end":19080,"line_start":551,"line_end":551,"column_start":5,"column_end":11},"alias_span":null,"name":"escape","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22546,"byte_end":22547,"line_start":643,"line_end":643,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":56}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22584,"byte_end":22585,"line_start":644,"line_end":644,"column_start":36,"column_end":37},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":56}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22609,"byte_end":22610,"line_start":645,"line_end":645,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":56}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22639,"byte_end":22640,"line_start":646,"line_end":646,"column_start":28,"column_end":29},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":56}},{"kind":"Use","ref_id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23230,"byte_end":23238,"line_start":678,"line_end":678,"column_start":22,"column_end":30},"alias_span":null,"name":"Compiler","value":"","parent":{"krate":0,"index":2168}},{"kind":"Use","ref_id":{"krate":0,"index":632},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23259,"byte_end":23263,"line_start":679,"line_end":679,"column_start":20,"column_end":24},"alias_span":null,"name":"Exec","value":"","parent":{"krate":0,"index":2168}},{"kind":"Use","ref_id":{"krate":0,"index":636},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23265,"byte_end":23276,"line_start":679,"line_end":679,"column_start":26,"column_end":37},"alias_span":null,"name":"ExecBuilder","value":"","parent":{"krate":0,"index":2168}},{"kind":"Use","ref_id":{"krate":0,"index":2594},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23299,"byte_end":23303,"line_start":680,"line_end":680,"column_start":21,"column_end":25},"alias_span":null,"name":"Char","value":"","parent":{"krate":0,"index":2168}},{"kind":"Use","ref_id":{"krate":0,"index":874},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23305,"byte_end":23310,"line_start":680,"line_end":680,"column_start":27,"column_end":32},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":2168}},{"kind":"Use","ref_id":{"krate":0,"index":2570},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23312,"byte_end":23321,"line_start":680,"line_end":680,"column_start":34,"column_end":43},"alias_span":null,"name":"CharInput","value":"","parent":{"krate":0,"index":2168}},{"kind":"Use","ref_id":{"krate":0,"index":2558},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23323,"byte_end":23330,"line_start":680,"line_end":680,"column_start":45,"column_end":52},"alias_span":null,"name":"InputAt","value":"","parent":{"krate":0,"index":2168}},{"kind":"Use","ref_id":{"krate":0,"index":2716},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23354,"byte_end":23369,"line_start":681,"line_end":681,"column_start":22,"column_end":37},"alias_span":null,"name":"LiteralSearcher","value":"","parent":{"krate":0,"index":2168}},{"kind":"Use","ref_id":{"krate":0,"index":2802},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23390,"byte_end":23397,"line_start":682,"line_end":682,"column_start":20,"column_end":27},"alias_span":null,"name":"Program","value":"","parent":{"krate":0,"index":2168}},{"kind":"Use","ref_id":{"krate":0,"index":2808},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23399,"byte_end":23403,"line_start":682,"line_end":682,"column_start":29,"column_end":33},"alias_span":null,"name":"Inst","value":"","parent":{"krate":0,"index":2168}},{"kind":"Use","ref_id":{"krate":0,"index":2848},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23405,"byte_end":23414,"line_start":682,"line_end":682,"column_start":35,"column_end":44},"alias_span":null,"name":"EmptyLook","value":"","parent":{"krate":0,"index":2168}},{"kind":"Use","ref_id":{"krate":0,"index":2878},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23416,"byte_end":23426,"line_start":682,"line_end":682,"column_start":46,"column_end":56},"alias_span":null,"name":"InstRanges","value":"","parent":{"krate":0,"index":2168}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":23430,"line_start":11,"line_end":683,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":56},{"krate":0,"index":66},{"krate":0,"index":114},{"krate":0,"index":134},{"krate":0,"index":318},{"krate":0,"index":550},{"krate":0,"index":570},{"krate":0,"index":802},{"krate":0,"index":828},{"krate":0,"index":832},{"krate":0,"index":1002},{"krate":0,"index":1306},{"krate":0,"index":1356},{"krate":0,"index":1434},{"krate":0,"index":1444},{"krate":0,"index":1694},{"krate":0,"index":1698},{"krate":0,"index":1770},{"krate":0,"index":2022},{"krate":0,"index":2058},{"krate":0,"index":2168}],"decl_id":null,"docs":"This crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18173,"byte_end":18195,"line_start":520,"line_end":520,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22507,"byte_end":22512,"line_start":642,"line_end":642,"column_start":9,"column_end":14},"name":"bytes","qualname":"::bytes","value":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64}],"decl_id":null,"docs":"Match regular expressions on arbitrary bytes.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22471,"byte_end":22498,"line_start":641,"line_end":641,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":44310,"byte_end":44318,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"Compiler","qualname":"::compile::Compiler","value":"Compiler {  }","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49}],"decl_id":null,"docs":" A compiler translates a regular expression AST to a sequence of\n instructions. The sequence of instructions represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":44729,"byte_end":44732,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Compiler>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new regular expression compiler.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":45327,"byte_end":45337,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"size_limit","qualname":"<Compiler>::size_limit","value":"fn (mut self, size_limit: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The size of the resulting program is limited by size_limit. If\n the program approximately exceeds the given size (in bytes), then\n compilation will stop and return an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":46082,"byte_end":46087,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Compiler>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If bytes is true, then the program is compiled as a byte based\n automaton, which incorporates UTF-8 decoding into the machine. If it's\n false, then the automaton is Unicode scalar value based, e.g., an\n engine utilizing such an automaton is responsible for UTF-8 decoding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":46370,"byte_end":46379,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Compiler>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":46862,"byte_end":46865,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"dfa","qualname":"<Compiler>::dfa","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for use in the DFA matching\n engine.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":47100,"byte_end":47107,"line_start":112,"line_end":112,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Compiler>::reverse","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for matching text in\n reverse. In particular, all concatenations are flipped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":47461,"byte_end":47468,"line_start":122,"line_end":122,"column_start":12,"column_end":19},"name":"compile","qualname":"<Compiler>::compile","value":"fn (mut self, exprs: &[Hir]) -> result::Result<Program, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compile a regular expression given its AST.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":979},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":159482,"byte_end":159488,"line_start":18,"line_end":18,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::error::Error::Syntax","value":"Error::Syntax(String)","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":" A syntax error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":983},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":159608,"byte_end":159622,"line_start":21,"line_end":21,"column_start":5,"column_end":19},"name":"CompiledTooBig","qualname":"::error::Error::CompiledTooBig","value":"Error::CompiledTooBig(usize)","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":" The compiled program exceeded the set size limit.\n The argument is the size limit imposed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":987},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":159909,"byte_end":159924,"line_start":28,"line_end":28,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2448},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":159446,"byte_end":159451,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Syntax, CompiledTooBig, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":979},{"krate":0,"index":983},{"krate":0,"index":987}],"decl_id":null,"docs":" An error that occurred during parsing or compiling a regular expression.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":632},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":162981,"byte_end":162985,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"Exec","qualname":"::exec::Exec","value":"Exec {  }","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":127}],"decl_id":null,"docs":" `Exec` manages the execution of a regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2460},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":163356,"byte_end":163366,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"ExecNoSync","qualname":"::exec::ExecNoSync","value":"ExecNoSync {  }","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":993}],"decl_id":null,"docs":" `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This\n means it is no longer Sync, but we can now avoid the overhead of\n synchronization to fetch the cache.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":634},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":163605,"byte_end":163618,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"ExecNoSyncStr","qualname":"::exec::ExecNoSyncStr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":636},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":165855,"byte_end":165866,"line_start":107,"line_end":107,"column_start":12,"column_end":23},"name":"ExecBuilder","qualname":"::exec::ExecBuilder","value":"ExecBuilder {  }","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141}],"decl_id":null,"docs":" Facilitates the construction of an executor by exposing various knobs\n to control how a regex is executed and what kinds of resources it's\n permitted to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":166467,"byte_end":166470,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"new","qualname":"<ExecBuilder>::new","value":"fn (re: &str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":166796,"byte_end":166804,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"new_many","qualname":"<ExecBuilder>::new_many","value":"fn <I, S> (res: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like new, but compiles the union of the given regular expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":167104,"byte_end":167115,"line_start":146,"line_end":146,"column_start":12,"column_end":23},"name":"new_options","qualname":"<ExecBuilder>::new_options","value":"fn (opts: RegexOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":167613,"byte_end":167622,"line_start":162,"line_end":162,"column_start":12,"column_end":21},"name":"automatic","qualname":"<ExecBuilder>::automatic","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the matching engine to be automatically determined.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":167937,"byte_end":167940,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ExecBuilder>::nfa","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use the NFA algorithm no matter what\n optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":168431,"byte_end":168451,"line_start":185,"line_end":185,"column_start":12,"column_end":32},"name":"bounded_backtracking","qualname":"<ExecBuilder>::bounded_backtracking","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use a bounded backtracking engine no\n matter what optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":169019,"byte_end":169024,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"bytes","qualname":"<ExecBuilder>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compiles byte based programs for use with the NFA matching engines.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":169295,"byte_end":169304,"line_start":208,"line_end":208,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<ExecBuilder>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":169427,"byte_end":169434,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ExecBuilder>::unicode","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the Unicode flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":172543,"byte_end":172548,"line_start":290,"line_end":290,"column_start":12,"column_end":17},"name":"build","qualname":"<ExecBuilder>::build","value":"fn (self) -> Result<Exec, Error>","parent":null,"children":[],"decl_id":null,"docs":" Build an executor that can run a regular expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199009,"byte_end":199024,"line_start":1062,"line_end":1062,"column_start":12,"column_end":27},"name":"many_matches_at","qualname":"<ExecNoSync<'c>>::many_matches_at","value":"fn (&self, matches: &mut [bool], text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds which regular expressions match the given text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":200873,"byte_end":200889,"line_start":1120,"line_end":1120,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSync<'c>>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201018,"byte_end":201034,"line_start":1126,"line_end":1126,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSyncStr<'c>>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201233,"byte_end":201241,"line_start":1134,"line_end":1134,"column_start":12,"column_end":20},"name":"searcher","qualname":"<Exec>::searcher","value":"fn (&self) -> ExecNoSync","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201175,"byte_end":201192,"line_start":1133,"line_end":1133,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201656,"byte_end":201668,"line_start":1146,"line_end":1146,"column_start":12,"column_end":24},"name":"searcher_str","qualname":"<Exec>::searcher_str","value":"fn (&self) -> ExecNoSyncStr","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync and can match on &str.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201598,"byte_end":201615,"line_start":1145,"line_end":1145,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201794,"byte_end":201804,"line_start":1151,"line_end":1151,"column_start":12,"column_end":22},"name":"into_regex","qualname":"<Exec>::into_regex","value":"fn (self) -> re_unicode::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201935,"byte_end":201949,"line_start":1156,"line_end":1156,"column_start":12,"column_end":26},"name":"into_regex_set","qualname":"<Exec>::into_regex_set","value":"fn (self) -> re_set::unicode::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":202124,"byte_end":202139,"line_start":1161,"line_end":1161,"column_start":12,"column_end":27},"name":"into_byte_regex","qualname":"<Exec>::into_byte_regex","value":"fn (self) -> re_bytes::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":202297,"byte_end":202316,"line_start":1166,"line_end":1166,"column_start":12,"column_end":31},"name":"into_byte_regex_set","qualname":"<Exec>::into_byte_regex_set","value":"fn (self) -> re_set::bytes::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":202503,"byte_end":202516,"line_start":1172,"line_end":1172,"column_start":12,"column_end":25},"name":"regex_strings","qualname":"<Exec>::regex_strings","value":"fn (&self) -> &[String]","parent":null,"children":[],"decl_id":null,"docs":" The original regular expressions given by the caller that were\n compiled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":202673,"byte_end":202686,"line_start":1179,"line_end":1179,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Exec>::capture_names","value":"fn (&self) -> &[Option<String>]","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of capture names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":202861,"byte_end":202877,"line_start":1185,"line_end":1185,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<Exec>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to named groups mapping (from group name to\n group position).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2558},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224333,"byte_end":224340,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"InputAt","qualname":"::input::InputAt","value":"InputAt {  }","parent":null,"children":[{"krate":0,"index":1087},{"krate":0,"index":1089},{"krate":0,"index":1091},{"krate":0,"index":1093}],"decl_id":null,"docs":" Represents a location in the input.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224322,"byte_end":224411,"line_start":25,"line_end":30,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224512,"byte_end":224520,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"is_start","qualname":"<InputAt>::is_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is at the beginning of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224647,"byte_end":224653,"line_start":39,"line_end":39,"column_start":12,"column_end":18},"name":"is_end","qualname":"<InputAt>::is_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is past the end of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224899,"byte_end":224903,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"char","qualname":"<InputAt>::char","value":"fn (&self) -> Char","parent":null,"children":[],"decl_id":null,"docs":" Returns the character at this position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224997,"byte_end":225001,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"byte","qualname":"<InputAt>::byte","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":225128,"byte_end":225131,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"len","qualname":"<InputAt>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the UTF-8 width of the character at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":225276,"byte_end":225284,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<InputAt>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the UTF-8 width of the character at this position\n is zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":225392,"byte_end":225395,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"pos","qualname":"<InputAt>::pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":225516,"byte_end":225524,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"next_pos","qualname":"<InputAt>::next_pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of the next position in the input.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":874},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":225650,"byte_end":225655,"line_start":79,"line_end":79,"column_start":11,"column_end":16},"name":"Input","qualname":"::input::Input","value":"Input","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890}],"decl_id":null,"docs":" An abstraction over input used in the matching engines.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":225728,"byte_end":225730,"line_start":81,"line_end":81,"column_start":8,"column_end":10},"name":"at","qualname":"::input::Input::at","value":"fn (&self, i: usize) -> InputAt","parent":{"krate":0,"index":874},"children":[],"decl_id":null,"docs":" Return an encoding of the position at byte offset `i`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":225907,"byte_end":225916,"line_start":86,"line_end":86,"column_start":8,"column_end":17},"name":"next_char","qualname":"::input::Input::next_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":874},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring next to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":226097,"byte_end":226110,"line_start":91,"line_end":91,"column_start":8,"column_end":21},"name":"previous_char","qualname":"::input::Input::previous_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":874},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring previous to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":226250,"byte_end":226264,"line_start":95,"line_end":95,"column_start":8,"column_end":22},"name":"is_empty_match","qualname":"::input::Input::is_empty_match","value":"fn (&self, at: InputAt, empty: &InstEmptyLook) -> bool","parent":{"krate":0,"index":874},"children":[],"decl_id":null,"docs":" Return true if the given empty width instruction matches at the\n input position given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":226371,"byte_end":226380,"line_start":98,"line_end":98,"column_start":8,"column_end":17},"name":"prefix_at","qualname":"::input::Input::prefix_at","value":"fn (&self, prefixes: &LiteralSearcher, at: InputAt) -> Option<InputAt>","parent":{"krate":0,"index":874},"children":[],"decl_id":null,"docs":" Scan the input for a matching prefix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":226530,"byte_end":226533,"line_start":105,"line_end":105,"column_start":8,"column_end":11},"name":"len","qualname":"::input::Input::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":874},"children":[],"decl_id":null,"docs":" The number of bytes in the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":226595,"byte_end":226603,"line_start":108,"line_end":108,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::input::Input::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":874},"children":[],"decl_id":null,"docs":" Whether the input is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":226702,"byte_end":226710,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::input::Input::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":874},"children":[],"decl_id":null,"docs":" Return the given input as a sequence of bytes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2570},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":227454,"byte_end":227463,"line_start":140,"line_end":140,"column_start":12,"column_end":21},"name":"CharInput","qualname":"::input::CharInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" An input reader over characters.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":227443,"byte_end":227478,"line_start":140,"line_end":140,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":227582,"byte_end":227585,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"new","qualname":"<CharInput<'t>>::new","value":"fn (s: &'t [u8]) -> CharInput<'t>","parent":null,"children":[],"decl_id":null,"docs":" Return a new character input reader for the given string.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2594},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":233527,"byte_end":233531,"line_start":346,"line_end":346,"column_start":12,"column_end":16},"name":"Char","qualname":"::input::Char","value":"","parent":null,"children":[],"decl_id":null,"docs":" An inline representation of `Option<char>`.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":233516,"byte_end":233537,"line_start":346,"line_end":346,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":233516,"byte_end":233537,"line_start":346,"line_end":346,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":233855,"byte_end":233862,"line_start":360,"line_end":360,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Char>::is_none","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is absent.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":233834,"byte_end":233843,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":234054,"byte_end":234062,"line_start":366,"line_end":366,"column_start":12,"column_end":20},"name":"len_utf8","qualname":"<Char>::len_utf8","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the character's UTF-8 encoding.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":234033,"byte_end":234042,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":234285,"byte_end":234297,"line_start":373,"line_end":373,"column_start":12,"column_end":24},"name":"is_word_char","qualname":"<Char>::is_word_char","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is a word character.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":234517,"byte_end":234529,"line_start":380,"line_end":380,"column_start":12,"column_end":24},"name":"is_word_byte","qualname":"<Char>::is_word_byte","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the byte is a word byte.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2716},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":236548,"byte_end":236563,"line_start":31,"line_end":31,"column_start":12,"column_end":27},"name":"LiteralSearcher","qualname":"::literal::LiteralSearcher","value":"LiteralSearcher {  }","parent":null,"children":[{"krate":0,"index":1181},{"krate":0,"index":1183},{"krate":0,"index":1185},{"krate":0,"index":1187}],"decl_id":null,"docs":" A prefix extracted from a compiled regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":237523,"byte_end":237528,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"empty","qualname":"<LiteralSearcher>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher that never matches and never advances the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":237679,"byte_end":237687,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"prefixes","qualname":"<LiteralSearcher>::prefixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal prefixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":237880,"byte_end":237888,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"suffixes","qualname":"<LiteralSearcher>::suffixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal suffixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":238749,"byte_end":238757,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"complete","qualname":"<LiteralSearcher>::complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all matches comprise the entire regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":238953,"byte_end":238957,"line_start":98,"line_end":98,"column_start":12,"column_end":16},"name":"find","qualname":"<LiteralSearcher>::find","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Find the position of a literal in `haystack` if it exists.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":238895,"byte_end":238912,"line_start":97,"line_end":97,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":239684,"byte_end":239694,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"find_start","qualname":"<LiteralSearcher>::find_start","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must start at index `0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":240082,"byte_end":240090,"line_start":127,"line_end":127,"column_start":12,"column_end":20},"name":"find_end","qualname":"<LiteralSearcher>::find_end","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must end at index `haystack.len()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":240515,"byte_end":240519,"line_start":140,"line_end":140,"column_start":12,"column_end":16},"name":"iter","qualname":"<LiteralSearcher>::iter","value":"fn (&self) -> LiteralIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all literals to be matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":241241,"byte_end":241244,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"lcp","qualname":"<LiteralSearcher>::lcp","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common prefix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":241379,"byte_end":241382,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"lcs","qualname":"<LiteralSearcher>::lcs","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common suffix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":241491,"byte_end":241499,"line_start":167,"line_end":167,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LiteralSearcher>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this prefix is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":241615,"byte_end":241618,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"len","qualname":"<LiteralSearcher>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of prefixes in this machine.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":242070,"byte_end":242086,"line_start":186,"line_end":186,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<LiteralSearcher>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of literals in bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":275},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":245484,"byte_end":245489,"line_start":272,"line_end":272,"column_start":5,"column_end":10},"name":"Empty","qualname":"::literal::LiteralIter::Empty","value":"LiteralIter::Empty","parent":{"krate":0,"index":1230},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":277},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":245495,"byte_end":245500,"line_start":273,"line_end":273,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::literal::LiteralIter::Bytes","value":"LiteralIter::Bytes(&'a [u8])","parent":{"krate":0,"index":1230},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":281},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":245516,"byte_end":245522,"line_start":274,"line_end":274,"column_start":5,"column_end":11},"name":"Single","qualname":"::literal::LiteralIter::Single","value":"LiteralIter::Single(&'a [u8])","parent":{"krate":0,"index":1230},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":285},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":245538,"byte_end":245540,"line_start":275,"line_end":275,"column_start":5,"column_end":7},"name":"AC","qualname":"::literal::LiteralIter::AC","value":"LiteralIter::AC(&'a [Literal])","parent":{"krate":0,"index":1230},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":289},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":245561,"byte_end":245571,"line_start":276,"line_end":276,"column_start":5,"column_end":15},"name":"TeddySSSE3","qualname":"::literal::LiteralIter::TeddySSSE3","value":"LiteralIter::TeddySSSE3(&'a [Vec<u8>])","parent":{"krate":0,"index":1230},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":293},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":245592,"byte_end":245601,"line_start":277,"line_end":277,"column_start":5,"column_end":14},"name":"TeddyAVX2","qualname":"::literal::LiteralIter::TeddyAVX2","value":"LiteralIter::TeddyAVX2(&'a [Vec<u8>])","parent":{"krate":0,"index":1230},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1230},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":245462,"byte_end":245473,"line_start":271,"line_end":271,"column_start":10,"column_end":21},"name":"LiteralIter","qualname":"::literal::LiteralIter","value":"LiteralIter::{Empty, Bytes, Single, AC, TeddySSSE3, TeddyAVX2}","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":277},{"krate":0,"index":281},{"krate":0,"index":285},{"krate":0,"index":289},{"krate":0,"index":293}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2746},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":250201,"byte_end":250212,"line_start":426,"line_end":426,"column_start":12,"column_end":23},"name":"FreqyPacked","qualname":"::literal::FreqyPacked","value":"FreqyPacked {  }","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1227},{"krate":0,"index":1229},{"krate":0,"index":1231},{"krate":0,"index":1233},{"krate":0,"index":1235}],"decl_id":null,"docs":" Provides an implementation of fast subtring search using frequency\n analysis.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":252655,"byte_end":252659,"line_start":502,"line_end":502,"column_start":12,"column_end":16},"name":"find","qualname":"<FreqyPacked>::find","value":"fn (&self, haystack: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":252597,"byte_end":252614,"line_start":501,"line_end":501,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1260},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":253487,"byte_end":253496,"line_start":528,"line_end":528,"column_start":12,"column_end":21},"name":"is_suffix","qualname":"<FreqyPacked>::is_suffix","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":253429,"byte_end":253446,"line_start":527,"line_end":527,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":253671,"byte_end":253674,"line_start":535,"line_end":535,"column_start":12,"column_end":15},"name":"len","qualname":"<FreqyPacked>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":253734,"byte_end":253742,"line_start":539,"line_end":539,"column_start":12,"column_end":20},"name":"char_len","qualname":"<FreqyPacked>::char_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2802},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":338268,"byte_end":338275,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Program","qualname":"::prog::Program","value":"Program { insts, matches, captures, capture_name_idx, start, byte_classes, only_utf8, is_bytes, is_dfa, is_reverse, is_anchored_start, is_anchored_end, has_unicode_word_boundary, prefixes, dfa_size_limit }","parent":null,"children":[{"krate":0,"index":1283},{"krate":0,"index":1285},{"krate":0,"index":1287},{"krate":0,"index":1289},{"krate":0,"index":1291},{"krate":0,"index":1293},{"krate":0,"index":1295},{"krate":0,"index":1297},{"krate":0,"index":1299},{"krate":0,"index":1301},{"krate":0,"index":1303},{"krate":0,"index":1305},{"krate":0,"index":1307},{"krate":0,"index":1309},{"krate":0,"index":1311}],"decl_id":null,"docs":" Program is a sequence of instructions and various facts about thos\n instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1283},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":338345,"byte_end":338350,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"insts","qualname":"::prog::Program::insts","value":"std::vec::Vec<prog::Inst>","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" A sequence of instructions that represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1285},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":338515,"byte_end":338522,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"matches","qualname":"::prog::Program::matches","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" Pointers to each Match instruction in the sequence.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1287},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":338656,"byte_end":338664,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"name":"captures","qualname":"::prog::Program::captures","value":"std::vec::Vec<std::option::Option<std::string::String>>","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" The ordered sequence of all capture groups extracted from the AST.\n Unnamed groups are `None`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1289},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":338757,"byte_end":338773,"line_start":29,"line_end":29,"column_start":9,"column_end":25},"name":"capture_name_idx","qualname":"::prog::Program::capture_name_idx","value":"std::sync::Arc<std::collections::HashMap<std::string::String, usize>>","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" Pointers to all named capture groups into `captures`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1291},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":339130,"byte_end":339135,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::Program::start","value":"usize","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" A pointer to the start instruction. This can vary depending on how\n the program was compiled. For example, programs for use with the DFA\n engine have a `.*?` inserted at the beginning of unanchored regular\n expressions. The actual starting point of the program is after the\n `.*?`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1293},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":339249,"byte_end":339261,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"byte_classes","qualname":"::prog::Program::byte_classes","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" A set of equivalence classes for discriminating bytes in the compiled\n program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1295},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":339340,"byte_end":339349,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"name":"only_utf8","qualname":"::prog::Program::only_utf8","value":"bool","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" When true, this program can only match valid UTF-8.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1297},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":339473,"byte_end":339481,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_bytes","qualname":"::prog::Program::is_bytes","value":"bool","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" When true, this program uses byte range instructions instead of Unicode\n range instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1299},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":339670,"byte_end":339676,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"is_dfa","qualname":"::prog::Program::is_dfa","value":"bool","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" When true, the program is compiled for DFA matching. For example, this\n implies `is_bytes` and also inserts a preceding `.*?` for unanchored\n regexes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1301},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":339782,"byte_end":339792,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"is_reverse","qualname":"::prog::Program::is_reverse","value":"bool","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" When true, the program matches text in reverse (for use only in the\n DFA).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1303},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":339874,"byte_end":339891,"line_start":52,"line_end":52,"column_start":9,"column_end":26},"name":"is_anchored_start","qualname":"::prog::Program::is_anchored_start","value":"bool","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" Whether the regex must match from the start of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1305},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":339969,"byte_end":339984,"line_start":54,"line_end":54,"column_start":9,"column_end":24},"name":"is_anchored_end","qualname":"::prog::Program::is_anchored_end","value":"bool","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" Whether the regex must match at the end of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1307},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":340075,"byte_end":340100,"line_start":56,"line_end":56,"column_start":9,"column_end":34},"name":"has_unicode_word_boundary","qualname":"::prog::Program::has_unicode_word_boundary","value":"bool","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" Whether this program contains a Unicode word boundary instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1309},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":340192,"byte_end":340200,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"name":"prefixes","qualname":"::prog::Program::prefixes","value":"literal::LiteralSearcher","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" A possibly empty machine for very quickly matching prefix literals.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1311},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":341027,"byte_end":341041,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::prog::Program::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2802},"children":[],"decl_id":null,"docs":" A limit on the size of the cache that the DFA is allowed to use while\n matching.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":341167,"byte_end":341170,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<Program>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty instruction sequence. Fields are given default\n values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":341885,"byte_end":341889,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"skip","qualname":"<Program>::skip","value":"fn (&self, mut pc: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" If pc is an index to a no-op instruction (like Save), then return the\n next pc that is not a no-op instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":342203,"byte_end":342217,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"leads_to_match","qualname":"<Program>::leads_to_match","value":"fn (&self, pc: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if an execution engine at instruction `pc` will\n always lead to a match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":342743,"byte_end":342756,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"needs_dotstar","qualname":"<Program>::needs_dotstar","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the current configuration demands that an implicit\n `.*?` be prepended to the instruction sequence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":342963,"byte_end":342973,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"uses_bytes","qualname":"<Program>::uses_bytes","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program uses Byte instructions instead of\n Char/Range instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":343208,"byte_end":343217,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Program>::only_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program exclusively matches valid UTF-8 bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":343365,"byte_end":343381,"line_start":147,"line_end":147,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<Program>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of this instruction sequence in\n bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1313},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":348083,"byte_end":348088,"line_start":267,"line_end":267,"column_start":5,"column_end":10},"name":"Match","qualname":"::prog::Inst::Match","value":"Inst::Match(usize)","parent":{"krate":0,"index":2808},"children":[],"decl_id":null,"docs":" Match indicates that the program has reached a match state.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1317},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":348218,"byte_end":348222,"line_start":270,"line_end":270,"column_start":5,"column_end":9},"name":"Save","qualname":"::prog::Inst::Save","value":"Inst::Save(InstSave)","parent":{"krate":0,"index":2808},"children":[],"decl_id":null,"docs":" Save causes the program to save the current location of the input in\n the slot indicated by InstSave.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1321},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":348357,"byte_end":348362,"line_start":273,"line_end":273,"column_start":5,"column_end":10},"name":"Split","qualname":"::prog::Inst::Split","value":"Inst::Split(InstSplit)","parent":{"krate":0,"index":2808},"children":[],"decl_id":null,"docs":" Split causes the program to diverge to one of two paths in the\n program, preferring goto1 in InstSplit.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1325},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":348522,"byte_end":348531,"line_start":276,"line_end":276,"column_start":5,"column_end":14},"name":"EmptyLook","qualname":"::prog::Inst::EmptyLook","value":"Inst::EmptyLook(InstEmptyLook)","parent":{"krate":0,"index":2808},"children":[],"decl_id":null,"docs":" EmptyLook represents a zero-width assertion in a regex program. A\n zero-width assertion does not consume any of the input text.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1329},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":348673,"byte_end":348677,"line_start":279,"line_end":279,"column_start":5,"column_end":9},"name":"Char","qualname":"::prog::Inst::Char","value":"Inst::Char(InstChar)","parent":{"krate":0,"index":2808},"children":[],"decl_id":null,"docs":" Char requires the regex program to match the character in InstChar at\n the current position in the input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1333},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":348851,"byte_end":348857,"line_start":282,"line_end":282,"column_start":5,"column_end":11},"name":"Ranges","qualname":"::prog::Inst::Ranges","value":"Inst::Ranges(InstRanges)","parent":{"krate":0,"index":2808},"children":[],"decl_id":null,"docs":" Ranges requires the regex program to match the character at the current\n position in the input with one of the ranges specified in InstRanges.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1337},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":349055,"byte_end":349060,"line_start":286,"line_end":286,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::prog::Inst::Bytes","value":"Inst::Bytes(InstBytes)","parent":{"krate":0,"index":2808},"children":[],"decl_id":null,"docs":" Bytes is like Ranges, except it expresses a single byte range. It is\n used in conjunction with Split instructions to implement multi-byte\n character classes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2808},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":347654,"byte_end":347658,"line_start":259,"line_end":259,"column_start":10,"column_end":14},"name":"Inst","qualname":"::prog::Inst","value":"Inst::{Match, Save, Split, EmptyLook, Char, Ranges, Bytes}","parent":null,"children":[{"krate":0,"index":1313},{"krate":0,"index":1317},{"krate":0,"index":1321},{"krate":0,"index":1325},{"krate":0,"index":1329},{"krate":0,"index":1333},{"krate":0,"index":1337}],"decl_id":null,"docs":" Inst is an instruction code in a Regex program.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":349164,"byte_end":349172,"line_start":291,"line_end":291,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Inst>::is_match","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this is a match instruction.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2818},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":349370,"byte_end":349378,"line_start":301,"line_end":301,"column_start":12,"column_end":20},"name":"InstSave","qualname":"::prog::InstSave","value":"InstSave { goto, slot }","parent":null,"children":[{"krate":0,"index":1341},{"krate":0,"index":1343}],"decl_id":null,"docs":" Representation of the Save instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1341},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":349442,"byte_end":349446,"line_start":303,"line_end":303,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstSave::goto","value":"usize","parent":{"krate":0,"index":2818},"children":[],"decl_id":null,"docs":" The next location to execute in the program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1343},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":349601,"byte_end":349605,"line_start":306,"line_end":306,"column_start":9,"column_end":13},"name":"slot","qualname":"::prog::InstSave::slot","value":"usize","parent":{"krate":0,"index":2818},"children":[],"decl_id":null,"docs":" The capture slot (there are two slots for every capture in a regex,\n including the zeroth capture for the entire match).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2828},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":349697,"byte_end":349706,"line_start":311,"line_end":311,"column_start":12,"column_end":21},"name":"InstSplit","qualname":"::prog::InstSplit","value":"InstSplit { goto1, goto2 }","parent":null,"children":[{"krate":0,"index":1345},{"krate":0,"index":1347}],"decl_id":null,"docs":" Representation of the Split instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1345},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":349862,"byte_end":349867,"line_start":314,"line_end":314,"column_start":9,"column_end":14},"name":"goto1","qualname":"::prog::InstSplit::goto1","value":"usize","parent":{"krate":0,"index":2828},"children":[],"decl_id":null,"docs":" The first instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1347},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350032,"byte_end":350037,"line_start":317,"line_end":317,"column_start":9,"column_end":14},"name":"goto2","qualname":"::prog::InstSplit::goto2","value":"usize","parent":{"krate":0,"index":2828},"children":[],"decl_id":null,"docs":" The second instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2838},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350137,"byte_end":350150,"line_start":322,"line_end":322,"column_start":12,"column_end":25},"name":"InstEmptyLook","qualname":"::prog::InstEmptyLook","value":"InstEmptyLook { goto, look }","parent":null,"children":[{"krate":0,"index":1349},{"krate":0,"index":1351}],"decl_id":null,"docs":" Representation of the `EmptyLook` instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1349},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350251,"byte_end":350255,"line_start":325,"line_end":325,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstEmptyLook::goto","value":"usize","parent":{"krate":0,"index":2838},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1351},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350325,"byte_end":350329,"line_start":327,"line_end":327,"column_start":9,"column_end":13},"name":"look","qualname":"::prog::InstEmptyLook::look","value":"prog::EmptyLook","parent":{"krate":0,"index":2838},"children":[],"decl_id":null,"docs":" The type of zero-width assertion to check.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1353},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350493,"byte_end":350502,"line_start":334,"line_end":334,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::prog::EmptyLook::StartLine","value":"EmptyLook::StartLine","parent":{"krate":0,"index":2848},"children":[],"decl_id":null,"docs":" Start of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1355},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350538,"byte_end":350545,"line_start":336,"line_end":336,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::prog::EmptyLook::EndLine","value":"EmptyLook::EndLine","parent":{"krate":0,"index":2848},"children":[],"decl_id":null,"docs":" End of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1357},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350575,"byte_end":350584,"line_start":338,"line_end":338,"column_start":5,"column_end":14},"name":"StartText","qualname":"::prog::EmptyLook::StartText","value":"EmptyLook::StartText","parent":{"krate":0,"index":2848},"children":[],"decl_id":null,"docs":" Start of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1359},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350612,"byte_end":350619,"line_start":340,"line_end":340,"column_start":5,"column_end":12},"name":"EndText","qualname":"::prog::EmptyLook::EndText","value":"EmptyLook::EndText","parent":{"krate":0,"index":2848},"children":[],"decl_id":null,"docs":" End of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1361},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350693,"byte_end":350705,"line_start":342,"line_end":342,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::prog::EmptyLook::WordBoundary","value":"EmptyLook::WordBoundary","parent":{"krate":0,"index":2848},"children":[],"decl_id":null,"docs":" Word character on one side and non-word character on other.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1363},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350785,"byte_end":350800,"line_start":344,"line_end":344,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::prog::EmptyLook::NotWordBoundary","value":"EmptyLook::NotWordBoundary","parent":{"krate":0,"index":2848},"children":[],"decl_id":null,"docs":" Word character on both sides or non-word character on both sides.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1365},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350835,"byte_end":350852,"line_start":346,"line_end":346,"column_start":5,"column_end":22},"name":"WordBoundaryAscii","qualname":"::prog::EmptyLook::WordBoundaryAscii","value":"EmptyLook::WordBoundaryAscii","parent":{"krate":0,"index":2848},"children":[],"decl_id":null,"docs":" ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1367},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350891,"byte_end":350911,"line_start":348,"line_end":348,"column_start":5,"column_end":25},"name":"NotWordBoundaryAscii","qualname":"::prog::EmptyLook::NotWordBoundaryAscii","value":"EmptyLook::NotWordBoundaryAscii","parent":{"krate":0,"index":2848},"children":[],"decl_id":null,"docs":" Not ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2848},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350445,"byte_end":350454,"line_start":332,"line_end":332,"column_start":10,"column_end":19},"name":"EmptyLook","qualname":"::prog::EmptyLook","value":"EmptyLook::{StartLine, EndLine, StartText, EndText, WordBoundary, NotWordBoundary, WordBoundaryAscii, NotWordBoundaryAscii}","parent":null,"children":[{"krate":0,"index":1353},{"krate":0,"index":1355},{"krate":0,"index":1357},{"krate":0,"index":1359},{"krate":0,"index":1361},{"krate":0,"index":1363},{"krate":0,"index":1365},{"krate":0,"index":1367}],"decl_id":null,"docs":" The set of zero-width match instructions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350436,"byte_end":350914,"line_start":332,"line_end":349,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350436,"byte_end":350914,"line_start":332,"line_end":349,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":2868},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":350995,"byte_end":351003,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"InstChar","qualname":"::prog::InstChar","value":"InstChar { goto, c }","parent":null,"children":[{"krate":0,"index":1369},{"krate":0,"index":1371}],"decl_id":null,"docs":" Representation of the Char instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1369},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":351104,"byte_end":351108,"line_start":356,"line_end":356,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstChar::goto","value":"usize","parent":{"krate":0,"index":2868},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1371},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":351158,"byte_end":351159,"line_start":358,"line_end":358,"column_start":9,"column_end":10},"name":"c","qualname":"::prog::InstChar::c","value":"char","parent":{"krate":0,"index":2868},"children":[],"decl_id":null,"docs":" The character to test.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2878},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":351251,"byte_end":351261,"line_start":363,"line_end":363,"column_start":12,"column_end":22},"name":"InstRanges","qualname":"::prog::InstRanges","value":"InstRanges { goto, ranges }","parent":null,"children":[{"krate":0,"index":1373},{"krate":0,"index":1375}],"decl_id":null,"docs":" Representation of the Ranges instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1373},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":351362,"byte_end":351366,"line_start":366,"line_end":366,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstRanges::goto","value":"usize","parent":{"krate":0,"index":2878},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1375},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":351441,"byte_end":351447,"line_start":368,"line_end":368,"column_start":9,"column_end":15},"name":"ranges","qualname":"::prog::InstRanges::ranges","value":"std::vec::Vec<(char, char)>","parent":{"krate":0,"index":2878},"children":[],"decl_id":null,"docs":" The set of Unicode scalar value ranges to test.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":351574,"byte_end":351581,"line_start":373,"line_end":373,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstRanges>::matches","value":"fn (&self, c: Char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given input character matches this instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":352367,"byte_end":352376,"line_start":398,"line_end":398,"column_start":12,"column_end":21},"name":"num_chars","qualname":"<InstRanges>::num_chars","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of distinct characters represented by all of the\n ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2888},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":352631,"byte_end":352640,"line_start":408,"line_end":408,"column_start":12,"column_end":21},"name":"InstBytes","qualname":"::prog::InstBytes","value":"InstBytes { goto, start, end }","parent":null,"children":[{"krate":0,"index":1377},{"krate":0,"index":1379},{"krate":0,"index":1381}],"decl_id":null,"docs":" Representation of the Bytes instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1377},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":352741,"byte_end":352745,"line_start":411,"line_end":411,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstBytes::goto","value":"usize","parent":{"krate":0,"index":2888},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1379},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":352814,"byte_end":352819,"line_start":413,"line_end":413,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::InstBytes::start","value":"u8","parent":{"krate":0,"index":2888},"children":[],"decl_id":null,"docs":" The start (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1381},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":352881,"byte_end":352884,"line_start":415,"line_end":415,"column_start":9,"column_end":12},"name":"end","qualname":"::prog::InstBytes::end","value":"u8","parent":{"krate":0,"index":2888},"children":[],"decl_id":null,"docs":" The end (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":352990,"byte_end":352997,"line_start":420,"line_end":420,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstBytes>::matches","value":"fn (&self, byte: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2898},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":353688,"byte_end":353700,"line_start":14,"line_end":14,"column_start":12,"column_end":24},"name":"RegexOptions","qualname":"::re_builder::RegexOptions","value":"RegexOptions { pats, size_limit, dfa_size_limit, nest_limit, case_insensitive, multi_line, dot_matches_new_line, swap_greed, ignore_whitespace, unicode, octal }","parent":null,"children":[{"krate":0,"index":1383},{"krate":0,"index":1385},{"krate":0,"index":1387},{"krate":0,"index":1389},{"krate":0,"index":1391},{"krate":0,"index":1393},{"krate":0,"index":1395},{"krate":0,"index":1397},{"krate":0,"index":1399},{"krate":0,"index":1401},{"krate":0,"index":1403}],"decl_id":null,"docs":" The set of user configurable options for compiling zero or more regexes.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":353654,"byte_end":353676,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1383},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":353711,"byte_end":353715,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"pats","qualname":"::re_builder::RegexOptions::pats","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":2898},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1385},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":353738,"byte_end":353748,"line_start":16,"line_end":16,"column_start":9,"column_end":19},"name":"size_limit","qualname":"::re_builder::RegexOptions::size_limit","value":"usize","parent":{"krate":0,"index":2898},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1387},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":353765,"byte_end":353779,"line_start":17,"line_end":17,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::re_builder::RegexOptions::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2898},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1389},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":353796,"byte_end":353806,"line_start":18,"line_end":18,"column_start":9,"column_end":19},"name":"nest_limit","qualname":"::re_builder::RegexOptions::nest_limit","value":"u32","parent":{"krate":0,"index":2898},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1391},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":353821,"byte_end":353837,"line_start":19,"line_end":19,"column_start":9,"column_end":25},"name":"case_insensitive","qualname":"::re_builder::RegexOptions::case_insensitive","value":"bool","parent":{"krate":0,"index":2898},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1393},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":353853,"byte_end":353863,"line_start":20,"line_end":20,"column_start":9,"column_end":19},"name":"multi_line","qualname":"::re_builder::RegexOptions::multi_line","value":"bool","parent":{"krate":0,"index":2898},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1395},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":353879,"byte_end":353899,"line_start":21,"line_end":21,"column_start":9,"column_end":29},"name":"dot_matches_new_line","qualname":"::re_builder::RegexOptions::dot_matches_new_line","value":"bool","parent":{"krate":0,"index":2898},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1397},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":353915,"byte_end":353925,"line_start":22,"line_end":22,"column_start":9,"column_end":19},"name":"swap_greed","qualname":"::re_builder::RegexOptions::swap_greed","value":"bool","parent":{"krate":0,"index":2898},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1399},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":353941,"byte_end":353958,"line_start":23,"line_end":23,"column_start":9,"column_end":26},"name":"ignore_whitespace","qualname":"::re_builder::RegexOptions::ignore_whitespace","value":"bool","parent":{"krate":0,"index":2898},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1401},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":353974,"byte_end":353981,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"unicode","qualname":"::re_builder::RegexOptions::unicode","value":"bool","parent":{"krate":0,"index":2898},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1403},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":353997,"byte_end":354002,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"name":"octal","qualname":"::re_builder::RegexOptions::octal","value":"bool","parent":{"krate":0,"index":2898},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3060},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":369127,"byte_end":369132,"line_start":30,"line_end":30,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_bytes::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":1431},{"krate":0,"index":1433},{"krate":0,"index":1435}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":369116,"byte_end":369194,"line_start":30,"line_end":34,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":369116,"byte_end":369194,"line_start":30,"line_end":34,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":369313,"byte_end":369318,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"start","qualname":"<Match<'t>>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":369292,"byte_end":369301,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":369457,"byte_end":369460,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"end","qualname":"<Match<'t>>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":369436,"byte_end":369445,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":369562,"byte_end":369570,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Match<'t>>::as_bytes","value":"fn (&self) -> &'t [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":369541,"byte_end":369550,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3082},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":370584,"byte_end":370589,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_bytes::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":371648,"byte_end":371651,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1512},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":372382,"byte_end":372390,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":373252,"byte_end":373256,"line_start":165,"line_end":165,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":373972,"byte_end":373981,"line_start":187,"line_end":187,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":377118,"byte_end":377126,"line_start":254,"line_end":254,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":378571,"byte_end":378584,"line_start":289,"line_end":289,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":379502,"byte_end":379507,"line_start":316,"line_end":316,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":380523,"byte_end":380529,"line_start":343,"line_end":343,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t [u8], limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":385312,"byte_end":385319,"line_start":462,"line_end":462,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided. The\n replacement can be a regular byte string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":385776,"byte_end":385787,"line_start":476,"line_end":476,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":386256,"byte_end":386264,"line_start":490,"line_end":490,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t [u8], limit: usize, mut rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":388739,"byte_end":388753,"line_start":561,"line_end":561,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":389141,"byte_end":389158,"line_start":571,"line_end":571,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &[u8], start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":389602,"byte_end":389613,"line_start":585,"line_end":585,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1540},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":390010,"byte_end":390017,"line_start":595,"line_end":595,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":390665,"byte_end":390678,"line_start":614,"line_end":614,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":391185,"byte_end":391201,"line_start":628,"line_end":628,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `captures_read`, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":391746,"byte_end":391762,"line_start":646,"line_end":646,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1550},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":392051,"byte_end":392057,"line_start":659,"line_end":659,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":392180,"byte_end":392193,"line_start":664,"line_end":664,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1554},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":392329,"byte_end":392341,"line_start":669,"line_end":669,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1556},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":392552,"byte_end":392569,"line_start":675,"line_end":675,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1558},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":392916,"byte_end":392925,"line_start":684,"line_end":684,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1560},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":393415,"byte_end":393422,"line_start":697,"line_end":697,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_bytes::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1568},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":393995,"byte_end":394009,"line_start":715,"line_end":715,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_bytes::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1576},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":394590,"byte_end":394595,"line_start":733,"line_end":733,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_bytes::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":403},{"krate":0,"index":405}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1584},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":395578,"byte_end":395584,"line_start":768,"line_end":768,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_bytes::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":417}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1592},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":396279,"byte_end":396291,"line_start":796,"line_end":796,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_bytes::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3088},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":397426,"byte_end":397442,"line_start":827,"line_end":827,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_bytes::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1602},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":397764,"byte_end":397773,"line_start":835,"line_end":835,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_bytes::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1606},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":398131,"byte_end":398134,"line_start":843,"line_end":843,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":398110,"byte_end":398119,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1608},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":398429,"byte_end":398432,"line_start":852,"line_end":852,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":398408,"byte_end":398417,"line_start":851,"line_end":851,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1610},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":398792,"byte_end":398795,"line_start":863,"line_end":863,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":398771,"byte_end":398780,"line_start":862,"line_end":862,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1612},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":399429,"byte_end":399437,"line_start":879,"line_end":879,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_bytes::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":441}],"decl_id":null,"docs":" Captures represents a group of captured byte strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1616},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":400372,"byte_end":400375,"line_start":905,"line_end":905,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures<'t>>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1618},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":400660,"byte_end":400664,"line_start":911,"line_end":911,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures<'t>>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1620},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":401096,"byte_end":401100,"line_start":920,"line_end":920,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures<'t>>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":402144,"byte_end":402150,"line_start":943,"line_end":943,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures<'t>>::expand","value":"fn (&self, replacement: &[u8], dst: &mut Vec<u8>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1624},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":402461,"byte_end":402464,"line_start":952,"line_end":952,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures<'t>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":402440,"byte_end":402449,"line_start":951,"line_end":951,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1654},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":405594,"byte_end":405611,"line_start":1049,"line_end":1049,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_bytes::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":491}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1662},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":406304,"byte_end":406312,"line_start":1070,"line_end":1070,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_bytes::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1664},{"krate":0,"index":1666},{"krate":0,"index":1668}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a byte\n string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1664},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":406598,"byte_end":406612,"line_start":1078,"line_end":1078,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_bytes::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":1662},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1666},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":407023,"byte_end":407035,"line_start":1087,"line_end":1087,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_bytes::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, [u8]>>","parent":{"krate":0,"index":1662},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1668},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":407766,"byte_end":407772,"line_start":1112,"line_end":1112,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_bytes::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1662},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3098},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":408000,"byte_end":408011,"line_start":1121,"line_end":1121,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_bytes::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1686},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":409296,"byte_end":409304,"line_start":1159,"line_end":1159,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_bytes::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal byte string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3344},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":426102,"byte_end":426111,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"Locations","qualname":"::re_trait::Locations","value":"","parent":null,"children":[],"decl_id":null,"docs":" Locations represents the offsets of each capturing group in a regex for\n a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":426440,"byte_end":426443,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"pos","qualname":"<Locations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":426887,"byte_end":426891,"line_start":40,"line_end":40,"column_start":12,"column_end":16},"name":"iter","qualname":"<Locations>::iter","value":"fn (&self) -> SubCapturesPosIter","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator of all the capture group positions in order of\n appearance in the regular expression. Positions are byte indices\n in terms of the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1708},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":427186,"byte_end":427189,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"len","qualname":"<Locations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1712},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":427602,"byte_end":427620,"line_start":64,"line_end":64,"column_start":12,"column_end":30},"name":"SubCapturesPosIter","qualname":"::re_trait::SubCapturesPosIter","value":"SubCapturesPosIter {  }","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":529}],"decl_id":null,"docs":" An iterator over capture group positions for a particular match of a\n regular expression.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1720},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":428823,"byte_end":428840,"line_start":99,"line_end":99,"column_start":11,"column_end":28},"name":"RegularExpression","qualname":"::re_trait::RegularExpression","value":"RegularExpression: Sized","parent":null,"children":[{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740}],"decl_id":null,"docs":" `RegularExpression` describes types that can implement regex searching.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1722},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":428893,"byte_end":428897,"line_start":101,"line_end":101,"column_start":10,"column_end":14},"name":"Text","qualname":"::re_trait::RegularExpression::Text","value":"type Text: ?Sized;","parent":{"krate":0,"index":1720},"children":[],"decl_id":null,"docs":" The type of the haystack.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":429072,"byte_end":429081,"line_start":105,"line_end":105,"column_start":8,"column_end":17},"name":"slots_len","qualname":"::re_trait::RegularExpression::slots_len","value":"fn (&self) -> usize","parent":{"krate":0,"index":1720},"children":[],"decl_id":null,"docs":" The number of capture slots in the compiled regular expression. This is\n always two times the number of capture groups (two slots per group).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1726},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":429177,"byte_end":429186,"line_start":108,"line_end":108,"column_start":8,"column_end":17},"name":"locations","qualname":"::re_trait::RegularExpression::locations","value":"fn (&self) -> Locations","parent":{"krate":0,"index":1720},"children":[],"decl_id":null,"docs":" Allocates fresh space for all capturing groups in this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":429532,"byte_end":429548,"line_start":117,"line_end":117,"column_start":8,"column_end":24},"name":"next_after_empty","qualname":"::re_trait::RegularExpression::next_after_empty","value":"fn (&self, text: &Self::Text, i: usize) -> usize","parent":{"krate":0,"index":1720},"children":[],"decl_id":null,"docs":" Returns the position of the next character after `i`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1730},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":429655,"byte_end":429672,"line_start":120,"line_end":120,"column_start":8,"column_end":25},"name":"shortest_match_at","qualname":"::re_trait::RegularExpression::shortest_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<usize>","parent":{"krate":0,"index":1720},"children":[],"decl_id":null,"docs":" Returns the location of the shortest match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1732},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":429828,"byte_end":429839,"line_start":127,"line_end":127,"column_start":8,"column_end":19},"name":"is_match_at","qualname":"::re_trait::RegularExpression::is_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> bool","parent":{"krate":0,"index":1720},"children":[],"decl_id":null,"docs":" Returns whether the regex matches the text given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1734},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":429993,"byte_end":430000,"line_start":134,"line_end":134,"column_start":8,"column_end":15},"name":"find_at","qualname":"::re_trait::RegularExpression::find_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":1720},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1736},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":430235,"byte_end":430251,"line_start":142,"line_end":142,"column_start":8,"column_end":24},"name":"captures_read_at","qualname":"::re_trait::RegularExpression::captures_read_at","value":"fn (&self, locs: &mut Locations, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":1720},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists, and also\n fills in any matching capture slot locations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1738},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":430484,"byte_end":430493,"line_start":151,"line_end":151,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::re_trait::RegularExpression::find_iter","value":"fn (self, text: &Self::Text) -> Matches<Self>","parent":{"krate":0,"index":1720},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1740},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":430815,"byte_end":430828,"line_start":165,"line_end":165,"column_start":8,"column_end":21},"name":"captures_iter","qualname":"::re_trait::RegularExpression::captures_iter","value":"fn (self, text: &Self::Text) -> CaptureMatches<Self>","parent":{"krate":0,"index":1720},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches with captures.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1742},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":431044,"byte_end":431051,"line_start":174,"line_end":174,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_trait::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":539},{"krate":0,"index":541},{"krate":0,"index":543}],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1746},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":431310,"byte_end":431314,"line_start":183,"line_end":183,"column_start":12,"column_end":16},"name":"text","qualname":"<Matches<'t, R>>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1748},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":431412,"byte_end":431417,"line_start":188,"line_end":188,"column_start":12,"column_end":17},"name":"regex","qualname":"<Matches<'t, R>>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1756},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":432617,"byte_end":432631,"line_start":225,"line_end":225,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_trait::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches with\n captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":432828,"byte_end":432832,"line_start":230,"line_end":230,"column_start":12,"column_end":16},"name":"text","qualname":"<CaptureMatches<'t, R>>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1762},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":432934,"byte_end":432939,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"regex","qualname":"<CaptureMatches<'t, R>>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1808},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":434820,"byte_end":434826,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"escape","qualname":"::re_unicode::escape","value":"fn (text: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3354},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":435077,"byte_end":435082,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_unicode::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":1533},{"krate":0,"index":1535},{"krate":0,"index":1537}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":435066,"byte_end":435143,"line_start":39,"line_end":43,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":435066,"byte_end":435143,"line_start":39,"line_end":43,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1812},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":435262,"byte_end":435267,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"start","qualname":"<Match<'t>>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":435241,"byte_end":435250,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":435406,"byte_end":435409,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"end","qualname":"<Match<'t>>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":435385,"byte_end":435394,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":435511,"byte_end":435517,"line_start":60,"line_end":60,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Match<'t>>::as_str","value":"fn (&self) -> &'t str","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":435490,"byte_end":435499,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3376},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":438222,"byte_end":438227,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_unicode::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching Unicode strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1844},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":439169,"byte_end":439172,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1846},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":439902,"byte_end":439910,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1848},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":440786,"byte_end":440790,"line_start":222,"line_end":222,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":441504,"byte_end":441513,"line_start":244,"line_end":244,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1852},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":444593,"byte_end":444601,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t str) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1854},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":445934,"byte_end":445947,"line_start":345,"line_end":345,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1856},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":446806,"byte_end":446811,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t str) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1858},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":447799,"byte_end":447805,"line_start":397,"line_end":397,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t str, limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1860},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":452342,"byte_end":452349,"line_start":509,"line_end":509,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided.\n The replacement can be a regular string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":452806,"byte_end":452817,"line_start":523,"line_end":523,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1864},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":453286,"byte_end":453294,"line_start":537,"line_end":537,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t str, limit: usize, mut rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":456250,"byte_end":456264,"line_start":617,"line_end":617,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &str) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":456651,"byte_end":456668,"line_start":627,"line_end":627,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &str, start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1872},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":457115,"byte_end":457126,"line_start":641,"line_end":641,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &str, start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1874},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":457522,"byte_end":457529,"line_start":651,"line_end":651,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1876},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":458191,"byte_end":458204,"line_start":671,"line_end":671,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1878},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":458703,"byte_end":458719,"line_start":685,"line_end":685,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as captures, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1880},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":459267,"byte_end":459283,"line_start":703,"line_end":703,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1884},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":459571,"byte_end":459577,"line_start":716,"line_end":716,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":459700,"byte_end":459713,"line_start":721,"line_end":721,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":459849,"byte_end":459861,"line_start":726,"line_end":726,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1890},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":460072,"byte_end":460089,"line_start":732,"line_end":732,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":460440,"byte_end":460449,"line_start":741,"line_end":741,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1894},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":460805,"byte_end":460817,"line_start":752,"line_end":752,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_unicode::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1904},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":461406,"byte_end":461411,"line_start":773,"line_end":773,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_unicode::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":635},{"krate":0,"index":637}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1912},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":462387,"byte_end":462393,"line_start":808,"line_end":808,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_unicode::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":649}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3382},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":463599,"byte_end":463615,"line_start":846,"line_end":846,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_unicode::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1920},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":463937,"byte_end":463946,"line_start":854,"line_end":854,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_unicode::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1924},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":464304,"byte_end":464307,"line_start":862,"line_end":862,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":464283,"byte_end":464292,"line_start":861,"line_end":861,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1926},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":464602,"byte_end":464605,"line_start":871,"line_end":871,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":464581,"byte_end":464590,"line_start":870,"line_end":870,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1928},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":464965,"byte_end":464968,"line_start":882,"line_end":882,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":464944,"byte_end":464953,"line_start":881,"line_end":881,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1930},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":465592,"byte_end":465600,"line_start":898,"line_end":898,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_unicode::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":659},{"krate":0,"index":661}],"decl_id":null,"docs":" Captures represents a group of captured strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1934},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":466498,"byte_end":466501,"line_start":924,"line_end":924,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures<'t>>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":466786,"byte_end":466790,"line_start":930,"line_end":930,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures<'t>>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1938},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":467222,"byte_end":467226,"line_start":939,"line_end":939,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures<'t>>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1940},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":468270,"byte_end":468276,"line_start":962,"line_end":962,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures<'t>>::expand","value":"fn (&self, replacement: &str, dst: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1942},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":468583,"byte_end":468586,"line_start":971,"line_end":971,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures<'t>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":468562,"byte_end":468571,"line_start":970,"line_end":970,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1966},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":471264,"byte_end":471281,"line_start":1053,"line_end":1053,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_unicode::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":711}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1974},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":471908,"byte_end":471922,"line_start":1074,"line_end":1074,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_unicode::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1982},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":472607,"byte_end":472614,"line_start":1095,"line_end":1095,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_unicode::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1990},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":473239,"byte_end":473247,"line_start":1112,"line_end":1112,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_unicode::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1992},{"krate":0,"index":1994},{"krate":0,"index":1996}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1992},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":473554,"byte_end":473568,"line_start":1120,"line_end":1120,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_unicode::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut String) -> ()","parent":{"krate":0,"index":1990},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1994},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":473973,"byte_end":473985,"line_start":1129,"line_end":1129,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_unicode::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, str>>","parent":{"krate":0,"index":1990},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1996},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":474706,"byte_end":474712,"line_start":1154,"line_end":1154,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_unicode::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1990},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3392},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":474940,"byte_end":474951,"line_start":1163,"line_end":1163,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_unicode::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2014},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":476209,"byte_end":476217,"line_start":1201,"line_end":1201,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_unicode::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3398},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":477098,"byte_end":477107,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"SparseSet","qualname":"::sparse::SparseSet","value":"SparseSet {  }","parent":null,"children":[{"krate":0,"index":1569},{"krate":0,"index":1571}],"decl_id":null,"docs":" A sparse set used for representing ordered NFA states.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2030},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":477486,"byte_end":477489,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseSet>::new","value":"fn (size: usize) -> SparseSet","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2032},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":477665,"byte_end":477668,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"len","qualname":"<SparseSet>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2034},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":477730,"byte_end":477738,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SparseSet>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2036},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":477804,"byte_end":477812,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SparseSet>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2038},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":477879,"byte_end":477885,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"insert","qualname":"<SparseSet>::insert","value":"fn (&mut self, value: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2040},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":478061,"byte_end":478069,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"contains","qualname":"<SparseSet>::contains","value":"fn (&self, value: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2042},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":478197,"byte_end":478202,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"clear","qualname":"<SparseSet>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2168},"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23198,"byte_end":23206,"line_start":677,"line_end":677,"column_start":9,"column_end":17},"name":"internal","qualname":"::internal","value":"/home/ginkoe/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.1.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":2170},{"krate":0,"index":2172},{"krate":0,"index":2178},{"krate":0,"index":2188},{"krate":0,"index":2190}],"decl_id":null,"docs":" The `internal` module exists to support suspicious activity, such as\n testing different matching engines and supporting the `regex-debug` CLI\n utility.\n","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23162,"byte_end":23189,"line_start":676,"line_end":676,"column_start":1,"column_end":28}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,98,97,99,107,116,114,97,99,107,46,114,115],"byte_start":26165,"byte_end":26170,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,98,97,99,107,116,114,97,99,107,46,114,115],"byte_start":26832,"byte_end":26839,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":44571,"byte_end":44579,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":71055,"byte_end":71064,"line_start":742,"line_end":742,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":73241,"byte_end":73249,"line_start":805,"line_end":805,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":74182,"byte_end":74194,"line_start":838,"line_end":838,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":78948,"byte_end":78959,"line_start":969,"line_end":969,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":80201,"byte_end":80213,"line_start":1011,"line_end":1011,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":93202,"byte_end":93208,"line_start":225,"line_end":225,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":95504,"byte_end":95512,"line_start":296,"line_end":296,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":95934,"byte_end":95939,"line_start":313,"line_end":313,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":100170,"byte_end":100175,"line_start":424,"line_end":424,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":100994,"byte_end":101004,"line_start":448,"line_end":448,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":101308,"byte_end":101311,"line_start":458,"line_end":458,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":410},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":149899,"byte_end":149907,"line_start":1635,"line_end":1635,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":150701,"byte_end":150712,"line_start":1671,"line_end":1671,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":152573,"byte_end":152583,"line_start":1728,"line_end":1728,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":153019,"byte_end":153023,"line_start":1754,"line_end":1754,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":153599,"byte_end":153604,"line_start":1779,"line_end":1779,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":153875,"byte_end":153886,"line_start":1789,"line_end":1789,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":154308,"byte_end":154322,"line_start":1803,"line_end":1803,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":154828,"byte_end":154838,"line_start":1821,"line_end":1821,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":159958,"byte_end":159963,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":160304,"byte_end":160309,"line_start":45,"line_end":45,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":160958,"byte_end":160963,"line_start":62,"line_end":62,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":166173,"byte_end":166184,"line_start":123,"line_end":123,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":654},{"krate":0,"index":656},{"krate":0,"index":658},{"krate":0,"index":660},{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":175644,"byte_end":175657,"line_start":368,"line_end":368,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":676},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":176695,"byte_end":176705,"line_start":403,"line_end":403,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":692},{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":186132,"byte_end":186142,"line_start":642,"line_end":642,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":702},{"krate":0,"index":706},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":718},{"krate":0,"index":722},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":748},{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":200987,"byte_end":201000,"line_start":1125,"line_end":1125,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201124,"byte_end":201128,"line_start":1131,"line_end":1131,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":202981,"byte_end":202985,"line_start":1190,"line_end":1190,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":203135,"byte_end":203147,"line_start":1199,"line_end":1199,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":782},{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":208713,"byte_end":208730,"line_start":1346,"line_end":1346,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,112,97,110,100,46,114,115],"byte_start":215692,"byte_end":215695,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,112,97,110,100,46,114,115],"byte_start":215791,"byte_end":215794,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224418,"byte_end":224425,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":227489,"byte_end":227498,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":227672,"byte_end":227681,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":227787,"byte_end":227796,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":930},{"krate":0,"index":932},{"krate":0,"index":934}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":229915,"byte_end":229924,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230186,"byte_end":230195,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230304,"byte_end":230313,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":233559,"byte_end":233563,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":233773,"byte_end":233777,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":974},{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":234732,"byte_end":234736,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":234818,"byte_end":234822,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":234945,"byte_end":234949,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":235178,"byte_end":235182,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,97,118,120,50,47,105,109,112,46,114,115],"byte_start":277666,"byte_end":277671,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1078},{"krate":0,"index":1080},{"krate":0,"index":1082},{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,97,118,120,50,47,105,109,112,46,114,115],"byte_start":289287,"byte_end":289292,"line_start":367,"line_end":367,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":1096},{"krate":0,"index":1098},{"krate":0,"index":1100},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,97,118,120,50,47,105,109,112,46,114,115],"byte_start":292079,"byte_end":292083,"line_start":448,"line_end":448,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1106},{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,115,115,115,101,51,47,105,109,112,46,114,115],"byte_start":309527,"byte_end":309532,"line_start":362,"line_end":362,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1136},{"krate":0,"index":1138},{"krate":0,"index":1140},{"krate":0,"index":1142},{"krate":0,"index":1144},{"krate":0,"index":1146},{"krate":0,"index":1148},{"krate":0,"index":1150},{"krate":0,"index":1152},{"krate":0,"index":1154},{"krate":0,"index":1156},{"krate":0,"index":1158},{"krate":0,"index":1160}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,115,115,115,101,51,47,105,109,112,46,114,115],"byte_start":321152,"byte_end":321157,"line_start":677,"line_end":677,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1164},{"krate":0,"index":1166},{"krate":0,"index":1168},{"krate":0,"index":1170},{"krate":0,"index":1172},{"krate":0,"index":1174}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,115,115,115,101,51,47,105,109,112,46,114,115],"byte_start":323945,"byte_end":323949,"line_start":758,"line_end":758,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1178},{"krate":0,"index":1180}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":237419,"byte_end":237434,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1192},{"krate":0,"index":1194},{"krate":0,"index":1198},{"krate":0,"index":1200},{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1206},{"krate":0,"index":1208},{"krate":0,"index":1210},{"krate":0,"index":1214}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":242566,"byte_end":242573,"line_start":200,"line_end":200,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1222},{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":245643,"byte_end":245654,"line_start":280,"line_end":280,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1234},{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":247369,"byte_end":247382,"line_start":343,"line_end":343,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1240},{"krate":0,"index":1242},{"krate":0,"index":1244},{"krate":0,"index":1246},{"krate":0,"index":1248},{"krate":0,"index":1250}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":251289,"byte_end":251300,"line_start":452,"line_end":452,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1254},{"krate":0,"index":1256},{"krate":0,"index":1258},{"krate":0,"index":1260},{"krate":0,"index":1262},{"krate":0,"index":1264},{"krate":0,"index":1266}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":256607,"byte_end":256623,"line_start":615,"line_end":615,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1278},{"krate":0,"index":1280},{"krate":0,"index":1290},{"krate":0,"index":1292},{"krate":0,"index":1296},{"krate":0,"index":1298},{"krate":0,"index":1300},{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":327745,"byte_end":327750,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1330}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":328044,"byte_end":328047,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1334},{"krate":0,"index":1336},{"krate":0,"index":1338},{"krate":0,"index":1342},{"krate":0,"index":1344}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":337235,"byte_end":337242,"line_start":358,"line_end":358,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1350},{"krate":0,"index":1352},{"krate":0,"index":1354}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":341058,"byte_end":341065,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1384},{"krate":0,"index":1386},{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1392}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":344019,"byte_end":344026,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1396},{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":344167,"byte_end":344174,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1402}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":349081,"byte_end":349085,"line_start":289,"line_end":289,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1422}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":351476,"byte_end":351486,"line_start":371,"line_end":371,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1426},{"krate":0,"index":1428}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":352898,"byte_end":352907,"line_start":418,"line_end":418,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1432}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":354030,"byte_end":354042,"line_start":28,"line_end":28,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1438}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":369205,"byte_end":369210,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1482},{"krate":0,"index":1484},{"krate":0,"index":1486},{"krate":0,"index":1488}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":370620,"byte_end":370625,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1492}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":370802,"byte_end":370807,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1496}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":371112,"byte_end":371117,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1500}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":371201,"byte_end":371206,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1504},{"krate":0,"index":1506}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":371417,"byte_end":371422,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":1526},{"krate":0,"index":1528},{"krate":0,"index":1530}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":387938,"byte_end":387943,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1540},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":391981,"byte_end":391986,"line_start":657,"line_end":657,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":393498,"byte_end":393505,"line_start":699,"line_end":699,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1564},{"krate":0,"index":1566}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":394092,"byte_end":394106,"line_start":717,"line_end":717,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1572},{"krate":0,"index":1574}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":394681,"byte_end":394686,"line_start":738,"line_end":738,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1580},{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":395665,"byte_end":395671,"line_start":773,"line_end":773,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1588},{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":396360,"byte_end":396372,"line_start":798,"line_end":798,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":397800,"byte_end":397816,"line_start":837,"line_end":837,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1610}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":399554,"byte_end":399562,"line_start":885,"line_end":885,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1616},{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1622},{"krate":0,"index":1624}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":402540,"byte_end":402548,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":402775,"byte_end":402788,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1634}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":404279,"byte_end":404287,"line_start":1010,"line_end":1010,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1644},{"krate":0,"index":1646}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":404923,"byte_end":404931,"line_start":1031,"line_end":1031,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1650},{"krate":0,"index":1652}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":405715,"byte_end":405732,"line_start":1054,"line_end":1054,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1658},{"krate":0,"index":1660}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":408094,"byte_end":408105,"line_start":1123,"line_end":1123,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1672},{"krate":0,"index":1674}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":408691,"byte_end":408692,"line_start":1145,"line_end":1145,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1684}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":409347,"byte_end":409355,"line_start":1161,"line_end":1161,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1690},{"krate":0,"index":1692}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":426130,"byte_end":426139,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1710}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":427693,"byte_end":427711,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1718}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":431202,"byte_end":431209,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1746},{"krate":0,"index":1748}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":431484,"byte_end":431491,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1752},{"krate":0,"index":1754}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":432713,"byte_end":432727,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1760},{"krate":0,"index":1762}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":433012,"byte_end":433026,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1766},{"krate":0,"index":1768}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":435154,"byte_end":435159,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1816},{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":438258,"byte_end":438263,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1826}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":438440,"byte_end":438445,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1830}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":438633,"byte_end":438638,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1834}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":438722,"byte_end":438727,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1838},{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":438938,"byte_end":438943,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1844},{"krate":0,"index":1846},{"krate":0,"index":1848},{"krate":0,"index":1850},{"krate":0,"index":1852},{"krate":0,"index":1854},{"krate":0,"index":1856},{"krate":0,"index":1858},{"krate":0,"index":1860},{"krate":0,"index":1862},{"krate":0,"index":1864}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":455457,"byte_end":455462,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1868},{"krate":0,"index":1870},{"krate":0,"index":1872},{"krate":0,"index":1874},{"krate":0,"index":1876},{"krate":0,"index":1878},{"krate":0,"index":1880}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":459501,"byte_end":459506,"line_start":714,"line_end":714,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1884},{"krate":0,"index":1886},{"krate":0,"index":1888},{"krate":0,"index":1890},{"krate":0,"index":1892}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":460886,"byte_end":460898,"line_start":754,"line_end":754,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1898},{"krate":0,"index":1900},{"krate":0,"index":1902}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":461497,"byte_end":461502,"line_start":778,"line_end":778,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1908},{"krate":0,"index":1910}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":462474,"byte_end":462480,"line_start":813,"line_end":813,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1916},{"krate":0,"index":1918}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":463973,"byte_end":463989,"line_start":856,"line_end":856,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1924},{"krate":0,"index":1926},{"krate":0,"index":1928}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":465716,"byte_end":465724,"line_start":904,"line_end":904,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1934},{"krate":0,"index":1936},{"krate":0,"index":1938},{"krate":0,"index":1940},{"krate":0,"index":1942}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":468662,"byte_end":468670,"line_start":976,"line_end":976,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1946}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":468897,"byte_end":468910,"line_start":984,"line_end":984,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1952}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":469957,"byte_end":469965,"line_start":1014,"line_end":1014,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1956},{"krate":0,"index":1958}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":470597,"byte_end":470605,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1962},{"krate":0,"index":1964}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":471385,"byte_end":471402,"line_start":1058,"line_end":1058,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1970},{"krate":0,"index":1972}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":472008,"byte_end":472022,"line_start":1076,"line_end":1076,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1978},{"krate":0,"index":1980}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":472693,"byte_end":472700,"line_start":1097,"line_end":1097,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1986},{"krate":0,"index":1988}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":475034,"byte_end":475045,"line_start":1165,"line_end":1165,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2000},{"krate":0,"index":2002}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":475625,"byte_end":475626,"line_start":1187,"line_end":1187,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2012}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":476259,"byte_end":476267,"line_start":1203,"line_end":1203,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2018},{"krate":0,"index":2020}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":477463,"byte_end":477472,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2030},{"krate":0,"index":2032},{"krate":0,"index":2034},{"krate":0,"index":2036},{"krate":0,"index":2038},{"krate":0,"index":2040},{"krate":0,"index":2042}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":478268,"byte_end":478277,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2046},{"krate":0,"index":2048}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,118,101,99,116,111,114,47,97,118,120,50,46,114,115],"byte_start":478779,"byte_end":478796,"line_start":9,"line_end":9,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2068},{"krate":0,"index":2070},{"krate":0,"index":2072},{"krate":0,"index":2074},{"krate":0,"index":2076},{"krate":0,"index":2078}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,118,101,99,116,111,114,47,97,118,120,50,46,114,115],"byte_start":480495,"byte_end":480500,"line_start":64,"line_end":64,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2082},{"krate":0,"index":2084},{"krate":0,"index":2086},{"krate":0,"index":2088},{"krate":0,"index":2090},{"krate":0,"index":2092},{"krate":0,"index":2094},{"krate":0,"index":2096},{"krate":0,"index":2098},{"krate":0,"index":2100},{"krate":0,"index":2102},{"krate":0,"index":2104},{"krate":0,"index":2106},{"krate":0,"index":2108}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,118,101,99,116,111,114,47,97,118,120,50,46,114,115],"byte_start":484283,"byte_end":484288,"line_start":182,"line_end":182,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2112}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,118,101,99,116,111,114,47,115,115,115,101,51,46,114,115],"byte_start":484926,"byte_end":484944,"line_start":17,"line_end":17,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2122},{"krate":0,"index":2124},{"krate":0,"index":2126},{"krate":0,"index":2128},{"krate":0,"index":2130},{"krate":0,"index":2132}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,118,101,99,116,111,114,47,115,115,115,101,51,46,114,115],"byte_start":487264,"byte_end":487269,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2136},{"krate":0,"index":2138},{"krate":0,"index":2140},{"krate":0,"index":2142},{"krate":0,"index":2144},{"krate":0,"index":2146},{"krate":0,"index":2148},{"krate":0,"index":2150},{"krate":0,"index":2152},{"krate":0,"index":2154},{"krate":0,"index":2156},{"krate":0,"index":2158},{"krate":0,"index":2160},{"krate":0,"index":2162}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,118,101,99,116,111,114,47,115,115,115,101,51,46,114,115],"byte_start":490043,"byte_end":490048,"line_start":187,"line_end":187,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2166}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,98,97,99,107,116,114,97,99,107,46,114,115],"byte_start":26165,"byte_end":26170,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":2206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,98,97,99,107,116,114,97,99,107,46,114,115],"byte_start":26832,"byte_end":26839,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":2200},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":44571,"byte_end":44579,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":71055,"byte_end":71064,"line_start":742,"line_end":742,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":2240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":73241,"byte_end":73249,"line_start":805,"line_end":805,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":2250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":74182,"byte_end":74194,"line_start":838,"line_end":838,"column_start":14,"column_end":26},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":78948,"byte_end":78959,"line_start":969,"line_end":969,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":290},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":80201,"byte_end":80213,"line_start":1011,"line_end":1011,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":93202,"byte_end":93208,"line_start":225,"line_end":225,"column_start":9,"column_end":15},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":2344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":95504,"byte_end":95512,"line_start":296,"line_end":296,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":356},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":95934,"byte_end":95939,"line_start":313,"line_end":313,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":2354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":100170,"byte_end":100175,"line_start":424,"line_end":424,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":2320},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":100994,"byte_end":101004,"line_start":448,"line_end":448,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":2326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":101308,"byte_end":101311,"line_start":458,"line_end":458,"column_start":10,"column_end":13},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":2338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":149899,"byte_end":149907,"line_start":1635,"line_end":1635,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":2442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":150701,"byte_end":150712,"line_start":1671,"line_end":1671,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":2332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":152573,"byte_end":152583,"line_start":1728,"line_end":1728,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":2416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":153019,"byte_end":153023,"line_start":1754,"line_end":1754,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":2374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":153599,"byte_end":153604,"line_start":1779,"line_end":1779,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":2354},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":153875,"byte_end":153886,"line_start":1789,"line_end":1789,"column_start":21,"column_end":32},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":2332},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":154308,"byte_end":154322,"line_start":1803,"line_end":1803,"column_start":25,"column_end":39},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":524},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,100,102,97,46,114,115],"byte_start":154828,"byte_end":154838,"line_start":1821,"line_end":1821,"column_start":21,"column_end":31},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":2416},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":159958,"byte_end":159963,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":2448},"to":{"krate":1,"index":2464}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":160304,"byte_end":160309,"line_start":45,"line_end":45,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":2448},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":160958,"byte_end":160963,"line_start":62,"line_end":62,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":2448},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":166173,"byte_end":166184,"line_start":123,"line_end":123,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":175644,"byte_end":175657,"line_start":368,"line_end":368,"column_start":32,"column_end":45},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":634},"to":{"krate":0,"index":1720}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":176695,"byte_end":176705,"line_start":403,"line_end":403,"column_start":32,"column_end":42},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":2460},"to":{"krate":0,"index":1720}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":186132,"byte_end":186142,"line_start":642,"line_end":642,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":2460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":200987,"byte_end":201000,"line_start":1125,"line_end":1125,"column_start":10,"column_end":23},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":201124,"byte_end":201128,"line_start":1131,"line_end":1131,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":202981,"byte_end":202985,"line_start":1190,"line_end":1190,"column_start":16,"column_end":20},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":632},"to":{"krate":2,"index":2558}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":203135,"byte_end":203147,"line_start":1199,"line_end":1199,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":2466},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":208713,"byte_end":208730,"line_start":1346,"line_end":1346,"column_start":6,"column_end":23},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":2508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,112,97,110,100,46,114,115],"byte_start":215692,"byte_end":215695,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":2536},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,101,120,112,97,110,100,46,114,115],"byte_start":215791,"byte_end":215794,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":2536},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":224418,"byte_end":224425,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":2558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":227489,"byte_end":227498,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":2570},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":227672,"byte_end":227681,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":2570},"to":{"krate":2,"index":1916}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":227787,"byte_end":227796,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":2570},"to":{"krate":0,"index":874}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":229915,"byte_end":229924,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":2582},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230186,"byte_end":230195,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":2582},"to":{"krate":2,"index":1916}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230304,"byte_end":230313,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":2582},"to":{"krate":0,"index":874}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":233559,"byte_end":233563,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":2594},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":233773,"byte_end":233777,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":2594},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":234732,"byte_end":234736,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":2594},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":234818,"byte_end":234822,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":2594},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":234945,"byte_end":234949,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":2594},"to":{"krate":2,"index":2370}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":235178,"byte_end":235182,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":2594},"to":{"krate":2,"index":2424}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,97,118,120,50,47,105,109,112,46,114,115],"byte_start":277666,"byte_end":277671,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":2642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,97,118,120,50,47,105,109,112,46,114,115],"byte_start":289287,"byte_end":289292,"line_start":367,"line_end":367,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":2652},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,97,118,120,50,47,105,109,112,46,114,115],"byte_start":292079,"byte_end":292083,"line_start":448,"line_end":448,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":2662},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,115,115,115,101,51,47,105,109,112,46,114,115],"byte_start":309527,"byte_end":309532,"line_start":362,"line_end":362,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":2684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,115,115,115,101,51,47,105,109,112,46,114,115],"byte_start":321152,"byte_end":321157,"line_start":677,"line_end":677,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":2694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,115,115,115,101,51,47,105,109,112,46,114,115],"byte_start":323945,"byte_end":323949,"line_start":758,"line_end":758,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":2704},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":237419,"byte_end":237434,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":2716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":242566,"byte_end":242573,"line_start":200,"line_end":200,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":2726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":245643,"byte_end":245654,"line_start":280,"line_end":280,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":1230},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":247369,"byte_end":247382,"line_start":343,"line_end":343,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":2736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":251289,"byte_end":251300,"line_start":452,"line_end":452,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":2746},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":256607,"byte_end":256623,"line_start":615,"line_end":615,"column_start":6,"column_end":22},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":2756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":327745,"byte_end":327750,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":2772},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":328044,"byte_end":328047,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":2766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":337235,"byte_end":337242,"line_start":358,"line_end":358,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":2782},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":341058,"byte_end":341065,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":2802},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":344019,"byte_end":344026,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":2802},"to":{"krate":2,"index":1916}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":344167,"byte_end":344174,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":2802},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":349081,"byte_end":349085,"line_start":289,"line_end":289,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":2808},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":351476,"byte_end":351486,"line_start":371,"line_end":371,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":2878},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":352898,"byte_end":352907,"line_start":418,"line_end":418,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":2888},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":354030,"byte_end":354042,"line_start":28,"line_end":28,"column_start":18,"column_end":30},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":2898},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":369205,"byte_end":369210,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":3060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":370620,"byte_end":370625,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":3082},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":370802,"byte_end":370807,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":3082},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":371112,"byte_end":371117,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":3082},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":371201,"byte_end":371206,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":3082},"to":{"krate":2,"index":6976}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":371417,"byte_end":371422,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":3082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":387938,"byte_end":387943,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":3082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":391981,"byte_end":391986,"line_start":657,"line_end":657,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":3082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":393498,"byte_end":393505,"line_start":699,"line_end":699,"column_start":27,"column_end":34},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":1560},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":394092,"byte_end":394106,"line_start":717,"line_end":717,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":394681,"byte_end":394686,"line_start":738,"line_end":738,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":395665,"byte_end":395671,"line_start":773,"line_end":773,"column_start":27,"column_end":33},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":1584},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":396360,"byte_end":396372,"line_start":798,"line_end":798,"column_start":23,"column_end":35},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":397800,"byte_end":397816,"line_start":837,"line_end":837,"column_start":6,"column_end":22},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":0,"index":3088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":399554,"byte_end":399562,"line_start":885,"line_end":885,"column_start":10,"column_end":18},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":0,"index":1612},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":402540,"byte_end":402548,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[88]},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":402775,"byte_end":402788,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":0,"index":1630},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":404279,"byte_end":404287,"line_start":1010,"line_end":1010,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":2016}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":404923,"byte_end":404931,"line_start":1031,"line_end":1031,"column_start":33,"column_end":41},"kind":{"variant":"Impl","fields":[91]},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":2016}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":405715,"byte_end":405732,"line_start":1054,"line_end":1054,"column_start":27,"column_end":44},"kind":{"variant":"Impl","fields":[92]},"from":{"krate":0,"index":1654},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":408094,"byte_end":408105,"line_start":1123,"line_end":1123,"column_start":50,"column_end":61},"kind":{"variant":"Impl","fields":[93]},"from":{"krate":0,"index":3098},"to":{"krate":0,"index":1662}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":408691,"byte_end":408692,"line_start":1145,"line_end":1145,"column_start":25,"column_end":26},"kind":{"variant":"Impl","fields":[94]},"from":{"krate":0,"index":513},"to":{"krate":0,"index":1662}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":409347,"byte_end":409355,"line_start":1161,"line_end":1161,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[95]},"from":{"krate":0,"index":1686},"to":{"krate":0,"index":1662}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":426130,"byte_end":426139,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[96]},"from":{"krate":0,"index":3344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":427693,"byte_end":427711,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"kind":{"variant":"Impl","fields":[97]},"from":{"krate":0,"index":1712},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":428842,"byte_end":428847,"line_start":99,"line_end":99,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1678},"to":{"krate":0,"index":1720}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":431202,"byte_end":431209,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"kind":{"variant":"Impl","fields":[98]},"from":{"krate":0,"index":1742},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":431484,"byte_end":431491,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"kind":{"variant":"Impl","fields":[99]},"from":{"krate":0,"index":1742},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":432713,"byte_end":432727,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"kind":{"variant":"Impl","fields":[100]},"from":{"krate":0,"index":1756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":433012,"byte_end":433026,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[101]},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":435154,"byte_end":435159,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[102]},"from":{"krate":0,"index":3354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":438258,"byte_end":438263,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[103]},"from":{"krate":0,"index":3376},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":438440,"byte_end":438445,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[104]},"from":{"krate":0,"index":3376},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":438633,"byte_end":438638,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[105]},"from":{"krate":0,"index":3376},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":438722,"byte_end":438727,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"kind":{"variant":"Impl","fields":[106]},"from":{"krate":0,"index":3376},"to":{"krate":2,"index":6976}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":438938,"byte_end":438943,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[107]},"from":{"krate":0,"index":3376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":455457,"byte_end":455462,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[108]},"from":{"krate":0,"index":3376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":459501,"byte_end":459506,"line_start":714,"line_end":714,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[109]},"from":{"krate":0,"index":3376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":460886,"byte_end":460898,"line_start":754,"line_end":754,"column_start":23,"column_end":35},"kind":{"variant":"Impl","fields":[110]},"from":{"krate":0,"index":1894},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":461497,"byte_end":461502,"line_start":778,"line_end":778,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[111]},"from":{"krate":0,"index":1904},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":462474,"byte_end":462480,"line_start":813,"line_end":813,"column_start":27,"column_end":33},"kind":{"variant":"Impl","fields":[112]},"from":{"krate":0,"index":1912},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":463973,"byte_end":463989,"line_start":856,"line_end":856,"column_start":6,"column_end":22},"kind":{"variant":"Impl","fields":[113]},"from":{"krate":0,"index":3382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":465716,"byte_end":465724,"line_start":904,"line_end":904,"column_start":10,"column_end":18},"kind":{"variant":"Impl","fields":[114]},"from":{"krate":0,"index":1930},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":468662,"byte_end":468670,"line_start":976,"line_end":976,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[115]},"from":{"krate":0,"index":1930},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":468897,"byte_end":468910,"line_start":984,"line_end":984,"column_start":29,"column_end":42},"kind":{"variant":"Impl","fields":[116]},"from":{"krate":0,"index":1948},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":469957,"byte_end":469965,"line_start":1014,"line_end":1014,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[117]},"from":{"krate":0,"index":1930},"to":{"krate":2,"index":2016}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":470597,"byte_end":470605,"line_start":1035,"line_end":1035,"column_start":33,"column_end":41},"kind":{"variant":"Impl","fields":[118]},"from":{"krate":0,"index":1930},"to":{"krate":2,"index":2016}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":471385,"byte_end":471402,"line_start":1058,"line_end":1058,"column_start":27,"column_end":44},"kind":{"variant":"Impl","fields":[119]},"from":{"krate":0,"index":1966},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":472008,"byte_end":472022,"line_start":1076,"line_end":1076,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[120]},"from":{"krate":0,"index":1974},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":472693,"byte_end":472700,"line_start":1097,"line_end":1097,"column_start":27,"column_end":34},"kind":{"variant":"Impl","fields":[121]},"from":{"krate":0,"index":1982},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":475034,"byte_end":475045,"line_start":1165,"line_end":1165,"column_start":50,"column_end":61},"kind":{"variant":"Impl","fields":[122]},"from":{"krate":0,"index":3392},"to":{"krate":0,"index":1990}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":475625,"byte_end":475626,"line_start":1187,"line_end":1187,"column_start":25,"column_end":26},"kind":{"variant":"Impl","fields":[123]},"from":{"krate":0,"index":759},"to":{"krate":0,"index":1990}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":476259,"byte_end":476267,"line_start":1203,"line_end":1203,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[124]},"from":{"krate":0,"index":2014},"to":{"krate":0,"index":1990}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":477463,"byte_end":477472,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[125]},"from":{"krate":0,"index":3398},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":478268,"byte_end":478277,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[126]},"from":{"krate":0,"index":3398},"to":{"krate":2,"index":1916}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,118,101,99,116,111,114,47,97,118,120,50,46,114,115],"byte_start":478779,"byte_end":478796,"line_start":9,"line_end":9,"column_start":6,"column_end":23},"kind":{"variant":"Impl","fields":[127]},"from":{"krate":0,"index":3408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,118,101,99,116,111,114,47,97,118,120,50,46,114,115],"byte_start":480495,"byte_end":480500,"line_start":64,"line_end":64,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[128]},"from":{"krate":0,"index":3420},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,118,101,99,116,111,114,47,97,118,120,50,46,114,115],"byte_start":484283,"byte_end":484288,"line_start":182,"line_end":182,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[129]},"from":{"krate":0,"index":3420},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,118,101,99,116,111,114,47,115,115,115,101,51,46,114,115],"byte_start":484926,"byte_end":484944,"line_start":17,"line_end":17,"column_start":6,"column_end":24},"kind":{"variant":"Impl","fields":[130]},"from":{"krate":0,"index":3428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,118,101,99,116,111,114,47,115,115,115,101,51,46,114,115],"byte_start":487264,"byte_end":487269,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[131]},"from":{"krate":0,"index":3440},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,105,110,107,111,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,49,46,53,47,115,114,99,47,118,101,99,116,111,114,47,115,115,115,101,51,46,114,115],"byte_start":490043,"byte_end":490048,"line_start":187,"line_end":187,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[132]},"from":{"krate":0,"index":3440},"to":{"krate":2,"index":8146}}]}